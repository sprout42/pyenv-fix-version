#!/usr/bin/env bash

set -e
[ -n "$PYENV_DEBUG" ] && set -x

if [ -z "$PYENV_ROOT" ]; then
  PYENV_ROOT="${HOME}/.pyenv"
fi

error() {
    echo -e "ERROR: $@" 1>&2
    exit 1
}

usage() {
    cat <<EOF
Find broken dependencies usage:
    [PYENV_VERSION=<version>] pyenv fix-version: [-v|--verbose]

Fix broken dependencies usage:
    [PYENV_VERSION=<version>] pyenv fix-version [-v|--verbose] path/to/missing/libs [extra/dirs ...]
EOF
    exit -1
}

set_vars() {
    DYNLOAD_DIR=$(realpath $(pyenv prefix)/lib/python*.*)
    if [ -n "$VERBOSE" ]; then
        echo "Searching version $(pyenv version-name) for broken libraries:"
        echo "  $DYNLOAD_DIR"
        echo
    fi

    PLATFORM=$(uname -s)
    case "$PLATFORM" in
        "Darwin")
            fix_file="fix_file_darwin"
            ;;
        *)
            echo "${PLATFORM} support TBD"
            exit 1
    esac
}

find_files() {
    DIR="$1"
    find ${DIR} -name "*.so" 2> /dev/null
}

get_dependencies() {
    FILE="$1"
    otool -L "${FILE}" | tail -n +2 | awk '{print $1}'
}

find_broken_dependencies() {
    FILE="$1"
    dependencies=( $(get_dependencies "$FILE") )
    declare -a broken
    for dep in "${dependencies[@]}"; do
        if [ ! -f "$dep" ]; then
            echo "$(basename $dep)"
        fi
    done
}

fix_file() {
    FILE="$1"
    dependencies=( $(get_dependencies "$FILE") )
    for dep in "${dependencies[@]}"; do
        if [ ! -f "$dep" ]; then
            find_filename=$(basename $dep)
            if [ -n "$VERBOSE" ]; then
                echo "$FILE has broken dependency"
            fi
            echo "Searching for $find_filename"
            result=$(find ${SEARCH_DIRS[*]} -name "$find_filename")
            if [ -z "$result" ]; then
                error "Cannot find replacement for $find_filename"
            fi
            exit -2
            replacements=( echo "$result" )

            # Make a backup first
            cp "$FILE" "${FILE}-broken"
            echo "Changing \"$dep\" to \"${replacements[0]}\" in \"$FILE\""
            install_name_tool -change "$dep" "${replacements[0]}" "$FILE"
        fi
    done
}

# possible arguments
# -v | --verbose
# -h | --help
#
# the rest of the arguments are directories
while true; do
    case $1 in
        -v | -verbose )
            VERBOSE=1;
            shift;;
        -h | -help ) usage;;
        * ) break;;
    esac
done

# Initialize non-argument based variables
set_vars

# Any remaining arguments are search directories
if [ "$#" -gt 0 ]; then
    SEARCH_DIRS=( $@ )
    if [ -n "$VERBOSE" ] && [ "${#SEARCH_DIRS[@]}" -gt 0 ]; then
        echo "Directories to search for missing libraries:"
        for dir in "${SEARCH_DIRS[@]}"; do
            echo "  $dir"
        done
        echo
    fi

    # Verify that the directories provided are valid
    for dir in "${SEARCH_DIRS[@]}"; do
        if [ ! -d $dir ]; then
            error "$dir is not a valid search directory"
        fi
    done
fi

files_to_check=( $(find_files "${DYNLOAD_DIR}") )
if [ "${#SEARCH_DIRS[@]}" -eq 0 ]; then
    declare -a broken
    for file in "${files_to_check[@]}"; do
        missing=( $(find_broken_dependencies $file) )
        if [ -n "$VERBOSE" ] && [ "${#missing[@]}" -gt 0 ]; then
            echo "broken dependencies found for $file:"
            for bad_file in "${missing[@]}"; do
                echo "  $bad_file"
            done
            echo
        fi
        broken+=$missing
    done
    if [ "${#broken[@]}" -gt 0 ]; then
        IFS=$'\n' broken_sorted=( $(sort -u <<<"${broken[*]}") )
        unset IFS
        echo "Cannot resolve the following dependencies for version $(pyenv version-name):"
        for file in "${broken_sorted[@]}"; do
            echo "  $file"
        done
    else
        echo "No problems found for $(pyenv version-name)"
    fi
else
    for file in "${files_to_check[@]}"; do
        fix_file $file
    done
fi
